{"title":"高级数据库(三)","uid":"f8bb74de42731f933c3d0ebf3bbf52ab","slug":"高级数据库-三","date":"2022-03-09T03:22:33.000Z","updated":"2022-03-09T03:28:14.887Z","comments":true,"path":"api/articles/高级数据库-三.json","keywords":null,"cover":null,"content":"<h4 id=\"Log-structured-store\"><a href=\"#Log-structured-store\" class=\"headerlink\" title=\"Log-structured store\"></a><a href=\"http://blog.notdot.net/2009/12/Damn-Cool-Algorithms-Log-structured-storage\">Log-structured store</a></h4><p>日志</p>\n<h5 id=\"写\"><a href=\"#写\" class=\"headerlink\" title=\"写\"></a>写</h5><p>追加式，顺序写，</p>\n<table>\n<thead>\n<tr>\n<th>–</th>\n<th>–</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Foo</td>\n<td>A</td>\n</tr>\n</tbody></table>\n<p>追加第二个元素Bar同时追加日志A·</p>\n<table>\n<thead>\n<tr>\n<th>–</th>\n<th>–</th>\n<th>–</th>\n<th>–</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Foo</td>\n<td>A</td>\n<td>Bar</td>\n<td>A`</td>\n</tr>\n</tbody></table>\n<p>重写Foo时在A·后追加，并没有修改Foo</p>\n<table>\n<thead>\n<tr>\n<th>–</th>\n<th>–</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Foo`</td>\n<td>A``</td>\n</tr>\n</tbody></table>\n<p>优点：</p>\n<p>不限于首先删除最旧的</p>\n<p>利于反复覆盖写的数据</p>\n<p>利于数据长时间存在的数据库</p>\n<h5 id=\"回收机制\"><a href=\"#回收机制\" class=\"headerlink\" title=\"回收机制\"></a>回收机制</h5><p>(磁盘空间有限，回收时也有代价的)</p>\n<p>例：每４个块为一个segment；4个 =满了就回收</p>\n<h4 id=\"BITCASK架构\"><a href=\"#BITCASK架构\" class=\"headerlink\" title=\"BITCASK架构\"></a>BITCASK架构</h4><p>内存-哈希索引</p>\n<p>put()不管是否存在，都是追加写，然后更新索引</p>\n<p>get()都是只查看位置，不写</p>\n<p>回收和文件的merge</p>\n<p>多个文件对同一key的多个value，可以回收掉旧的只保留新的</p>\n<p>例:</p>\n<p>D1    purr:2108    purr:2105</p>\n<p>D2    purr:2111</p>\n<p>D3    mew:1086</p>\n<p>只存purr:2111和mew:1086</p>\n<h4 id=\"存储大小计算\"><a href=\"#存储大小计算\" class=\"headerlink\" title=\"存储大小计算\"></a>存储大小计算</h4><h4 id=\"容错机制\"><a href=\"#容错机制\" class=\"headerlink\" title=\"容错机制\"></a>容错机制</h4><p>B+树需要日志来保证掉电时不会丢失写入</p>\n<p>BITCASK本身数据就是日志</p>\n<p>对old data file生成一个hint file，定期做哈希表物化(hint file只存value的位置信息，定期重写，并且不写旧value的位置)</p>\n<h3 id=\"Log-structured-Merge-Tree-LSM-tree-Model\"><a href=\"#Log-structured-Merge-Tree-LSM-tree-Model\" class=\"headerlink\" title=\"Log-structured Merge Tree(LSM-tree) Model\"></a><strong>Log-structured Merge Tree(LSM-tree) Model</strong></h3><p>基本架构</p>\n<p>Memtable</p>\n<p>SStables</p>\n<h4 id=\"写操作\"><a href=\"#写操作\" class=\"headerlink\" title=\"写操作\"></a>写操作</h4><p>①在内存中先写入memtable，当一个memtable写满后变为immutable memtable</p>\n<p>②然后把immutable memtable写入磁盘(小合并minor Compaction)</p>\n<h6 id=\"①和②同时进行，不断产生新的imm，同时冻结-小合并minor-Compaction-入磁盘\"><a href=\"#①和②同时进行，不断产生新的imm，同时冻结-小合并minor-Compaction-入磁盘\" class=\"headerlink\" title=\"①和②同时进行，不断产生新的imm，同时冻结(小合并minor Compaction)入磁盘\"></a>①和②同时进行，不断产生新的imm，同时冻结(小合并minor Compaction)入磁盘</h6><p>③imm转移到磁盘后变为level 0 SStables</p>\n<p>④level 0转为level 1    (大合并major Compaction)(level 1各块不相交)</p>\n<p>⑤level1转为level 2    (level 2 各块不相交)</p>\n<h4 id=\"读操作\"><a href=\"#读操作\" class=\"headerlink\" title=\"读操作\"></a>读操作</h4><p>先读刚写入的内存中的有没有，</p>\n<p>没有读到就读磁盘中leval0中的最新数据</p>\n<p>没有读到就读level1</p>\n<p>从上往下，从新往旧读(读起来比B+Tree慢)</p>\n<h5 id=\"写放大\"><a href=\"#写放大\" class=\"headerlink\" title=\"写放大\"></a>写放大</h5><p>①写入1-100，其中57在leval0 leval1 level 2中都有</p>\n<p>②写入 5 ,6,51-100；为了写入5和6；需要在level1时写1-25</p>\n<h5 id=\"写操作时的小合并和大合并很性能；一般研究减少写放大-写放大减少可以减少合并\"><a href=\"#写操作时的小合并和大合并很性能；一般研究减少写放大-写放大减少可以减少合并\" class=\"headerlink\" title=\"写操作时的小合并和大合并很性能；一般研究减少写放大(写放大减少可以减少合并)\"></a>写操作时的小合并和大合并很性能；一般研究减少写放大(写放大减少可以减少合并)</h5><p>B+Tree的并发不容易实现，LSMTree的并发容易实现</p>\n<h4 id=\"链表扩展\"><a href=\"#链表扩展\" class=\"headerlink\" title=\"链表扩展\"></a>链表扩展</h4><p>选择部分数据构成上层链表（表面上有好多层，实际上没有层的概念；实际上一个结点有多个next既有多个后继结点）</p>\n<h4 id=\"LevelDB的Sstable结构\"><a href=\"#LevelDB的Sstable结构\" class=\"headerlink\" title=\"LevelDB的Sstable结构\"></a>LevelDB的Sstable结构</h4><p>sstable文件中metablocl index中元信息？？？？</p>\n<table>\n<thead>\n<tr>\n<th>–</th>\n<th>–</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>data block (n)</td>\n<td>存</td>\n</tr>\n<tr>\n<td>meta block (n)</td>\n<td>管</td>\n</tr>\n<tr>\n<td>metablock index</td>\n<td>管</td>\n</tr>\n<tr>\n<td>index block</td>\n<td>管</td>\n</tr>\n<tr>\n<td>footer</td>\n<td>管</td>\n</tr>\n</tbody></table>\n<p>1）DataBlock：存储Key-Value记录，分为Data、type、CRC三部分</p>\n<p>2）MetaBlock：暂时没有使用</p>\n<p>3）MetaBlock_index：记录filter的相关信息（暂时没有考虑filter）</p>\n<p>4）IndexBlock：描述一个DataBlock，存储着对应DataBlock的最大Key值，DataBlock在.sst文件中的偏移量和大小</p>\n<p>5）Footer ：索引的索引，记录IndexBlock和MetaIndexBlock在SSTable中的偏移量了和大小</p>\n","feature":true,"text":"Log-structured store日志 写追加式，顺序写， – – Foo A 追加第二个元素Bar同时追加日志A· – – – – Foo A Bar A` 重写Foo时在A·后追加，并没有修改Foo – – Foo` A`` 优点： 不限于首先删除最旧的 利于反复覆盖写...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"数据库","slug":"数据库","count":3,"path":"api/tags/数据库.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Log-structured-store\"><span class=\"toc-text\">Log-structured store</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%86%99\"><span class=\"toc-text\">写</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">回收机制</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#BITCASK%E6%9E%B6%E6%9E%84\"><span class=\"toc-text\">BITCASK架构</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AD%98%E5%82%A8%E5%A4%A7%E5%B0%8F%E8%AE%A1%E7%AE%97\"><span class=\"toc-text\">存储大小计算</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%B9%E9%94%99%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">容错机制</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Log-structured-Merge-Tree-LSM-tree-Model\"><span class=\"toc-text\">Log-structured Merge Tree(LSM-tree) Model</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%86%99%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">写操作</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E2%91%A0%E5%92%8C%E2%91%A1%E5%90%8C%E6%97%B6%E8%BF%9B%E8%A1%8C%EF%BC%8C%E4%B8%8D%E6%96%AD%E4%BA%A7%E7%94%9F%E6%96%B0%E7%9A%84imm%EF%BC%8C%E5%90%8C%E6%97%B6%E5%86%BB%E7%BB%93-%E5%B0%8F%E5%90%88%E5%B9%B6minor-Compaction-%E5%85%A5%E7%A3%81%E7%9B%98\"><span class=\"toc-text\">①和②同时进行，不断产生新的imm，同时冻结(小合并minor Compaction)入磁盘</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%AF%BB%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">读操作</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%86%99%E6%94%BE%E5%A4%A7\"><span class=\"toc-text\">写放大</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%86%99%E6%93%8D%E4%BD%9C%E6%97%B6%E7%9A%84%E5%B0%8F%E5%90%88%E5%B9%B6%E5%92%8C%E5%A4%A7%E5%90%88%E5%B9%B6%E5%BE%88%E6%80%A7%E8%83%BD%EF%BC%9B%E4%B8%80%E8%88%AC%E7%A0%94%E7%A9%B6%E5%87%8F%E5%B0%91%E5%86%99%E6%94%BE%E5%A4%A7-%E5%86%99%E6%94%BE%E5%A4%A7%E5%87%8F%E5%B0%91%E5%8F%AF%E4%BB%A5%E5%87%8F%E5%B0%91%E5%90%88%E5%B9%B6\"><span class=\"toc-text\">写操作时的小合并和大合并很性能；一般研究减少写放大(写放大减少可以减少合并)</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%93%BE%E8%A1%A8%E6%89%A9%E5%B1%95\"><span class=\"toc-text\">链表扩展</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#LevelDB%E7%9A%84Sstable%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">LevelDB的Sstable结构</span></a></li></ol>","author":{"name":"硕硕一只","slug":"blog-author","avatar":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fhbimg.huabanimg.com%2F80d6d8c3ba2f7b0b2d6f11ca3aeb3282b0e5e6db4440d-hBmm8H_fw658&refer=http%3A%2F%2Fhbimg.huabanimg.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1640525060&t=3e93c392bb08daa019a7de3fc6da319b","link":"https://zhaoyushuo123.github.io","description":"欢迎来到我的个人博客，本博客以记录链接网址为主，知识内容为辅，禁止他人转载知识内容。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"C语言三目运算符","uid":"bcb689243294c5ab3ad73b7092cc9b2e","slug":"C语言三目运算符","date":"2022-03-19T10:09:23.000Z","updated":"2022-03-19T10:19:23.295Z","comments":true,"path":"api/articles/C语言三目运算符.json","keywords":null,"cover":null,"text":"FF https://www.cnblogs.com/ye-ming/articles/7942452.htmlhttps://zhidao.baidu.com/question/112672396.html怎么看汇编代码https://jingyan.baidu.com/art...","link":"","photos":[],"count_time":{"symbolsCount":175,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"硕硕一只","slug":"blog-author","avatar":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fhbimg.huabanimg.com%2F80d6d8c3ba2f7b0b2d6f11ca3aeb3282b0e5e6db4440d-hBmm8H_fw658&refer=http%3A%2F%2Fhbimg.huabanimg.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1640525060&t=3e93c392bb08daa019a7de3fc6da319b","link":"https://zhaoyushuo123.github.io","description":"欢迎来到我的个人博客，本博客以记录链接网址为主，知识内容为辅，禁止他人转载知识内容。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"高级数据库(二)","uid":"484ed101a339f32d2f63113921bee531","slug":"高级数据库-二","date":"2022-03-09T03:20:51.000Z","updated":"2022-03-09T03:21:34.390Z","comments":true,"path":"api/articles/高级数据库-二.json","keywords":null,"cover":null,"text":"为什么引入buffer缓冲块B+写放大，不能顺序写，读的性能差 引入buffer利于写放大引入日志保证写入内存时持久化，可以把随机写改为顺序写 利于读 空页，查找一个页，淘汰(LRU,SendCache) 网址https://www.geeksforgeeks.org/page-...","link":"","photos":[],"count_time":{"symbolsCount":364,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"数据库","slug":"数据库","count":3,"path":"api/tags/数据库.json"}],"author":{"name":"硕硕一只","slug":"blog-author","avatar":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fhbimg.huabanimg.com%2F80d6d8c3ba2f7b0b2d6f11ca3aeb3282b0e5e6db4440d-hBmm8H_fw658&refer=http%3A%2F%2Fhbimg.huabanimg.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1640525060&t=3e93c392bb08daa019a7de3fc6da319b","link":"https://zhaoyushuo123.github.io","description":"欢迎来到我的个人博客，本博客以记录链接网址为主，知识内容为辅，禁止他人转载知识内容。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}